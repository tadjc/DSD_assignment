$date
	Fri Jan 05 06:26:26 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module test1_tb $end
$var wire 1 ! reset $end
$var wire 2 " srA [1:0] $end
$var wire 2 # sr [1:0] $end
$var wire 1 $ slave_2 $end
$var wire 1 % slave_1 $end
$var wire 1 & slave_0 $end
$var wire 1 ' sel4 $end
$var wire 1 ( sel3 $end
$var wire 1 ) sel2 $end
$var wire 1 * sel1 $end
$var wire 1 + rwA $end
$var wire 1 , rw $end
$var wire 2 - respout [1:0] $end
$var wire 1 . read_write $end
$var wire 1 / rdyout $end
$var wire 1 0 mux2 $end
$var wire 1 1 mux1 $end
$var wire 1 2 grant_2 $end
$var wire 1 3 grant_1 $end
$var wire 1 4 error $end
$var wire 2 5 dr [1:0] $end
$var wire 32 6 dataout [31:0] $end
$var wire 1 7 busreq_2 $end
$var wire 1 8 busreq_1 $end
$var wire 32 9 bus_dout [31:0] $end
$var wire 32 : bus_din [31:0] $end
$var wire 16 ; address [15:0] $end
$var wire 1 < Dout $end
$var wire 1 = Aout $end
$var wire 16 > Abus [15:0] $end
$var reg 1 ? clk $end
$var reg 32 @ rdin1 [31:0] $end
$var reg 32 A rdin2 [31:0] $end
$var reg 32 B rdin3 [31:0] $end
$var reg 1 C rdy1 $end
$var reg 1 D rdy2 $end
$var reg 1 E rdy3 $end
$var reg 1 F ready $end
$var reg 2 G resp1 [1:0] $end
$var reg 2 H resp2 [1:0] $end
$var reg 2 I resp3 [1:0] $end
$var reg 2 J response [1:0] $end
$var reg 1 K rst $end
$var reg 1 L split $end
$var reg 1 M start $end
$scope module cpt1 $end
$var wire 1 ? clk $end
$var wire 1 F ready $end
$var wire 2 N response [1:0] $end
$var wire 1 K rst $end
$var wire 1 L split $end
$var wire 1 . read_write $end
$var wire 1 7 busreq_2 $end
$var wire 1 8 busreq_1 $end
$var parameter 2 O ERROR $end
$var parameter 2 P M1 $end
$var parameter 2 Q M11 $end
$var parameter 2 R M2 $end
$var parameter 2 S M22 $end
$var parameter 2 T MB $end
$var parameter 2 U MX1 $end
$var parameter 2 V MX2 $end
$var parameter 2 W OKAY $end
$var parameter 2 X RETRY $end
$var parameter 2 Y SPLIT $end
$var parameter 3 Z s0 $end
$var parameter 3 [ s1 $end
$var parameter 3 \ s2 $end
$var parameter 3 ] s3 $end
$var parameter 3 ^ s4 $end
$var reg 1 = Aout $end
$var reg 1 < Dout $end
$var reg 1 4 error $end
$var reg 1 3 grant_1 $end
$var reg 1 2 grant_2 $end
$var reg 1 1 mux1 $end
$var reg 1 0 mux2 $end
$var reg 1 * sel1 $end
$var reg 1 ) sel2 $end
$var reg 1 ( sel3 $end
$var reg 1 ' sel4 $end
$var reg 3 _ state [2:0] $end
$upscope $end
$scope module dpt $end
$var wire 1 = Aout $end
$var wire 1 < Dout $end
$var wire 32 ` bus_din [31:0] $end
$var wire 1 ? clk $end
$var wire 16 a data_in1 [15:0] $end
$var wire 16 b data_in2 [15:0] $end
$var wire 32 c data_in3 [31:0] $end
$var wire 32 d data_in4 [31:0] $end
$var wire 1 1 mux1 $end
$var wire 1 0 mux2 $end
$var wire 32 e rdin1 [31:0] $end
$var wire 32 f rdin2 [31:0] $end
$var wire 32 g rdin3 [31:0] $end
$var wire 1 C rdy1 $end
$var wire 1 D rdy2 $end
$var wire 1 E rdy3 $end
$var wire 2 h resp1 [1:0] $end
$var wire 2 i resp2 [1:0] $end
$var wire 2 j resp3 [1:0] $end
$var wire 1 K rst $end
$var wire 1 * sel1 $end
$var wire 1 ) sel2 $end
$var wire 1 ( sel3 $end
$var wire 1 ' sel4 $end
$var wire 16 k z [15:0] $end
$var wire 16 l y [15:0] $end
$var wire 16 m x [15:0] $end
$var wire 1 $ slave_2 $end
$var wire 1 % slave_1 $end
$var wire 1 & slave_0 $end
$var wire 3 n seld [2:0] $end
$var wire 2 o respout [1:0] $end
$var wire 1 / rdyout $end
$var wire 32 p r [31:0] $end
$var wire 32 q q [31:0] $end
$var wire 32 r p [31:0] $end
$var wire 1 s hsel_2 $end
$var wire 1 t hsel_1 $end
$var wire 1 u hsel_0 $end
$var wire 32 v dout [31:0] $end
$var wire 32 w dataout [31:0] $end
$var wire 32 x bus_dout [31:0] $end
$var wire 16 y address [15:0] $end
$var wire 16 z Abus [15:0] $end
$scope module HADDR1 $end
$var wire 1 ? clk $end
$var wire 16 { din [15:0] $end
$var wire 1 * ld $end
$var reg 16 | dout [15:0] $end
$upscope $end
$scope module HADDR2 $end
$var wire 1 ? clk $end
$var wire 16 } din [15:0] $end
$var wire 1 ) ld $end
$var reg 16 ~ dout [15:0] $end
$upscope $end
$scope module HWDATA1 $end
$var wire 1 ? clk $end
$var wire 32 !" din [31:0] $end
$var wire 1 ( ld $end
$var reg 32 "" dout [31:0] $end
$upscope $end
$scope module HWDATA2 $end
$var wire 1 ? clk $end
$var wire 32 #" din [31:0] $end
$var wire 1 ' ld $end
$var reg 32 $" dout [31:0] $end
$upscope $end
$scope module add_buff $end
$var wire 1 = en $end
$var wire 1 K rst $end
$var wire 16 %" in [15:0] $end
$var reg 16 &" out [15:0] $end
$upscope $end
$scope module addressmux $end
$var wire 16 '" in0 [15:0] $end
$var wire 16 (" in1 [15:0] $end
$var wire 1 1 sel $end
$var wire 16 )" out [15:0] $end
$upscope $end
$scope module data_buff $end
$var wire 1 < en $end
$var wire 1 K rst $end
$var wire 32 *" in [31:0] $end
$var reg 32 +" out [31:0] $end
$upscope $end
$scope module datamux $end
$var wire 32 ," in0 [31:0] $end
$var wire 32 -" in1 [31:0] $end
$var wire 1 0 sel $end
$var wire 32 ." out [31:0] $end
$upscope $end
$scope module dec1 $end
$var wire 16 /" haddr [15:0] $end
$var wire 1 K rst $end
$var reg 1 u hsel_0 $end
$var reg 1 t hsel_1 $end
$var reg 1 s hsel_2 $end
$upscope $end
$scope module out1 $end
$var wire 1 u in $end
$var wire 1 & out $end
$upscope $end
$scope module out2 $end
$var wire 1 t in $end
$var wire 1 % out $end
$upscope $end
$scope module out3 $end
$var wire 1 s in $end
$var wire 1 $ out $end
$upscope $end
$scope module readMUX $end
$var wire 32 0" hrdata_1 [31:0] $end
$var wire 32 1" hrdata_2 [31:0] $end
$var wire 32 2" hrdata_3 [31:0] $end
$var wire 1 C hreadyout_1 $end
$var wire 1 D hreadyout_2 $end
$var wire 1 E hreadyout_3 $end
$var wire 2 3" hresp_1 [1:0] $end
$var wire 2 4" hresp_2 [1:0] $end
$var wire 2 5" hresp_3 [1:0] $end
$var wire 3 6" sel [2:0] $end
$var reg 32 7" hrdata [31:0] $end
$var reg 1 / hreadyout $end
$var reg 2 8" hresponse [1:0] $end
$upscope $end
$upscope $end
$scope module master_1 $end
$var wire 32 9" bus_din [31:0] $end
$var wire 1 ? clk $end
$var wire 1 ! reset $end
$var wire 2 :" srA [1:0] $end
$var wire 2 ;" sr [1:0] $end
$var wire 1 + rwA $end
$var wire 1 , rw $end
$var wire 2 <" dr [1:0] $end
$var wire 32 =" bus_dout [31:0] $end
$var wire 16 >" Abus [15:0] $end
$scope module in_data_master $end
$var wire 1 ? clk $end
$var wire 32 ?" hrdatax1 [31:0] $end
$var wire 2 @" sr1 [1:0] $end
$var wire 1 , read_write $end
$var wire 2 A" dr1 [1:0] $end
$var reg 32 B" R0 [31:0] $end
$var reg 32 C" R1 [31:0] $end
$var reg 32 D" R2 [31:0] $end
$var reg 32 E" R3 [31:0] $end
$upscope $end
$scope module out_address $end
$var wire 1 ? clk $end
$var wire 2 F" dr1 [1:0] $end
$var wire 2 G" sr1 [1:0] $end
$var wire 1 + read_write $end
$var reg 16 H" R0 [15:0] $end
$var reg 16 I" R1 [15:0] $end
$var reg 16 J" R2 [15:0] $end
$var reg 16 K" R3 [15:0] $end
$var reg 16 L" data_in1x1 [15:0] $end
$upscope $end
$scope module out_data_master $end
$var wire 1 ? clk $end
$var wire 2 M" sr1 [1:0] $end
$var wire 1 , read_write $end
$var reg 32 N" R0 [31:0] $end
$var reg 32 O" R1 [31:0] $end
$var reg 32 P" R2 [31:0] $end
$var reg 32 Q" R3 [31:0] $end
$var reg 32 R" data_in1x1 [31:0] $end
$upscope $end
$upscope $end
$scope module master_1_control $end
$var wire 1 ? clk $end
$var wire 1 3 grant_1 $end
$var wire 1 2 grant_2 $end
$var wire 1 K rst $end
$var wire 1 M start $end
$var parameter 3 S" s0 $end
$var parameter 3 T" s1 $end
$var parameter 3 U" s2 $end
$var parameter 3 V" s3 $end
$var parameter 3 W" s4 $end
$var reg 1 8 busreq_1 $end
$var reg 1 7 busreq_2 $end
$var reg 2 X" dr [1:0] $end
$var reg 1 . read_write $end
$var reg 1 , rw $end
$var reg 1 + rwA $end
$var reg 2 Y" sr [1:0] $end
$var reg 2 Z" srA [1:0] $end
$var reg 3 [" state [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 W"
b11 V"
b10 U"
b1 T"
b0 S"
b100 ^
b11 ]
b10 \
b1 [
b0 Z
b11 Y
b10 X
b0 W
bx0 V
b0x U
b11 T
b10 S
b1x R
b1 Q
bx1 P
b1 O
$end
#0
$dumpvars
bx ["
bx Z"
bx Y"
bx X"
bx R"
b0 Q"
b110000000000000000000000010011 P"
b100000000000000000000000001011 O"
b10000000000000000000000001010 N"
bx M"
bx L"
b0 K"
b11000000001100 J"
b10000000001011 I"
b1000000001010 H"
bx G"
bz F"
bx E"
bx D"
bx C"
bx B"
bx A"
bz @"
b0 ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
b0 9"
b0 8"
b0 7"
b0 6"
bx 5"
b11 4"
b1 3"
bx 2"
b0 1"
b110010 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
b0 v
0u
0t
0s
bx r
bx q
bx p
b0 o
b0 n
bx m
bx l
bx k
bx j
b11 i
b1 h
bx g
b0 f
b110010 e
bx d
bx c
bx b
bx a
b0 `
bx _
bx N
xM
xL
0K
bx J
bx I
b11 H
b1 G
xF
xE
0D
1C
bx B
b0 A
b110010 @
0?
bx >
x=
x<
bx ;
b0 :
bx 9
x8
x7
bx 6
bx 5
x4
x3
x2
x1
x0
0/
x.
b0 -
x,
x+
x*
x)
x(
x'
0&
0%
0$
bx #
bx "
z!
$end
#5
b0 ;
b0 y
b0 &"
b0 6
b0 w
b0 +"
b0 k
b0 %"
b0 )"
b0 /"
b0 p
b0 *"
b0 ."
02
03
0<
00
0'
0(
0=
01
0)
0*
bz "
bz :"
bz G"
bz Z"
bz 5
bz <"
bz A"
bz X"
bz #
bz ;"
bz M"
bz Y"
0+
0,
07
08
b0 m
b0 |
b0 '"
b0 l
b0 ~
b0 ("
b0 r
b0 ""
b0 ,"
b0 q
b0 $"
b0 -"
b0 _
b0 ["
1?
#10
0?
1F
0L
#15
1?
#20
0?
b0 J
b0 N
#25
1?
#30
0?
1M
#35
1.
18
1?
#40
0?
#45
1<
1(
1=
1*
b1 _
04
13
1?
#50
0?
#55
bx 6
bx w
bx +"
bx ;
bx y
bx &"
b1 #
b1 ;"
b1 M"
b1 Y"
1,
1+
b1 "
b1 :"
b1 G"
b1 Z"
bx p
bx *"
bx ."
bx k
bx %"
bx )"
bx /"
b1 ["
bx r
bx ""
bx ,"
bx m
bx |
bx '"
1?
0F
#60
0?
#65
b100000000000000000000000001011 d
b100000000000000000000000001011 #"
b100000000000000000000000001011 c
b100000000000000000000000001011 !"
b100000000000000000000000001011 9
b100000000000000000000000001011 x
b100000000000000000000000001011 ="
b100000000000000000000000001011 R"
b10000000001011 b
b10000000001011 }
b10000000001011 a
b10000000001011 {
b10000000001011 >
b10000000001011 z
b10000000001011 >"
b10000000001011 L"
1?
#70
0?
#75
b1 -
b1 o
b1 8"
1/
b110010 :
b110010 `
b110010 9"
b110010 ?"
b110010 v
b110010 7"
b100000000000000000000000001011 6
b100000000000000000000000001011 w
b100000000000000000000000001011 +"
b10000000001011 ;
b10000000001011 y
b10000000001011 &"
1&
b1 n
b1 6"
1u
b100000000000000000000000001011 p
b100000000000000000000000001011 *"
b100000000000000000000000001011 ."
b10000000001011 k
b10000000001011 %"
b10000000001011 )"
b10000000001011 /"
b100000000000000000000000001011 r
b100000000000000000000000001011 ""
b100000000000000000000000001011 ,"
b10000000001011 m
b10000000001011 |
b10000000001011 '"
1?
#80
0?
#85
1?
#90
0?
#95
1?
#100
0?
#105
1?
#110
0?
#115
1?
#120
0?
#125
1?
#130
0?
#135
1?
#140
0?
#145
1?
#150
0?
#155
1?
#160
0?
#165
1?
#170
0?
#175
1?
#180
0?
#185
1?
#190
0?
#195
1?
#200
0?
#205
1?
#210
0?
#215
1?
#220
0?
#225
1?
#230
0?
#235
1?
#240
0?
#245
1?
#250
0?
#255
1?
#260
0?
#265
1?
#270
0?
#275
1?
#280
0?
#285
1?
#290
0?
#295
1?
#300
0?
#305
1?
#310
0?
#315
1?
#320
0?
#325
1?
#330
0?
#335
1?
#340
0?
#345
1?
#350
0?
#355
1?
#360
0?
#365
1?
#370
0?
#375
1?
#380
0?
#385
1?
#390
0?
#395
1?
#400
0?
#405
1?
#410
0?
#415
1?
#420
0?
#425
1?
#430
0?
#435
1?
#440
0?
#445
1?
#450
0?
#455
1?
#460
0?
#465
1?
#470
0?
#475
1?
#480
0?
#485
1?
#490
0?
#495
1?
#500
0?
#505
1?
#510
0?
#515
1?
#520
0?
#525
1?
#530
0?
#535
1?
#540
0?
#545
1?
#550
0?
#555
1?
#560
0?
#565
1?
#570
0?
#575
1?
#580
0?
#585
1?
#590
0?
#595
1?
#600
0?
#605
1?
#610
0?
#615
1?
#620
0?
#625
1?
#630
0?
#635
1?
#640
0?
#645
1?
#650
0?
#655
1?
#660
0?
#665
1?
#670
0?
#675
1?
#680
0?
#685
1?
#690
0?
#695
1?
#700
0?
#705
1?
#710
0?
#715
1?
#720
0?
#725
1?
#730
0?
#735
1?
#740
0?
#745
1?
#750
0?
#755
1?
#760
0?
#765
1?
#770
0?
#775
1?
#780
0?
#785
1?
#790
0?
#795
1?
#800
0?
#805
1?
#810
0?
#815
1?
#820
0?
#825
1?
#830
0?
#835
1?
#840
0?
#845
1?
#850
0?
#855
1?
#860
0?
#865
1?
#870
0?
#875
1?
#880
0?
#885
1?
#890
0?
#895
1?
#900
0?
#905
1?
#910
0?
#915
1?
#920
0?
#925
1?
#930
0?
#935
1?
#940
0?
#945
1?
#950
0?
#955
1?
#960
0?
#965
1?
#970
0?
#975
1?
#980
0?
#985
1?
#990
0?
#995
1?
#1000
0?
